"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCookies = exports.getUrl = exports.getTitle = exports.findElements = exports.findElement = exports.transformSelector = exports.setViewportSize = exports.getViewportSize = exports.childContext = exports.parentContext = exports.mainContext = exports.executeScript = void 0;
function executeScript(context, script, arg) {
    let scriptToExecute;
    if (script.includes('dom-snapshot') ||
        script.includes('dom-capture') ||
        script.includes('dom-shared')) {
        scriptToExecute = script;
    }
    else {
        const prepScirpt = script.replace('function(arg)', 'function func(arg)');
        scriptToExecute = prepScirpt.concat(' return func(arg)');
    }
    const executor = new context.defaultView.Function('arg', scriptToExecute);
    return executor(arg);
}
exports.executeScript = executeScript;
function mainContext() {
    //@ts-ignore
    return cy.state('window').document;
}
exports.mainContext = mainContext;
function parentContext(context) {
    // because Cypress doesn't support cross origin iframe, then childContext might return null, and then the input to parentContext might be null
    if (!context) {
        throw new Error('Context is not accessible');
    }
    ;
    return context === mainContext() ? context : context.defaultView.frameElement.ownerDocument;
}
exports.parentContext = parentContext;
function childContext(_context, element) {
    if (element.contentDocument)
        return element.contentDocument;
    else {
        throw new Error('Context is not accessible');
    }
}
exports.childContext = childContext;
function getViewportSize() {
    //@ts-ignore
    const currWindow = cy.state('window');
    const viewportSize = {
        width: Math.max(currWindow.document.documentElement.clientWidth || 0, currWindow.innerWidth || 0),
        height: Math.max(currWindow.document.documentElement.clientHeight || 0, currWindow.innerHeight || 0)
    };
    return viewportSize;
}
exports.getViewportSize = getViewportSize;
function setViewportSize(vs) {
    //@ts-ignore
    Cypress.action('cy:viewport:changed', { viewportWidth: vs.size.width, viewportHeight: vs.size.height });
}
exports.setViewportSize = setViewportSize;
function transformSelector(selector) {
    if (selector.hasOwnProperty('selector') && (!selector.hasOwnProperty('type') || selector.type === 'css')) {
        return selector.selector;
    }
    return selector;
}
exports.transformSelector = transformSelector;
function findElement(context, selector, parent) {
    const eyesSelector = selector;
    const root = parent !== null && parent !== void 0 ? parent : context;
    const sel = typeof selector === 'string' ? selector : eyesSelector.selector;
    if (typeof selector !== 'string' && eyesSelector.type === 'xpath') {
        return context.evaluate(sel, context, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    }
    else {
        return root.querySelector(sel);
    }
}
exports.findElement = findElement;
function findElements(context, selector, parent) {
    const eyesSelector = selector;
    const root = parent !== null && parent !== void 0 ? parent : context;
    const sel = typeof selector === 'string' ? selector : eyesSelector.selector;
    if (typeof selector !== 'string' && eyesSelector.type === 'xpath') {
        const results = [];
        const queryResult = document.evaluate(sel, context, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
        for (let i = 0; i < queryResult.snapshotLength; i++) {
            results.push(queryResult.snapshotItem(i));
        }
        return results;
    }
    else {
        return root.querySelectorAll(sel);
    }
}
exports.findElements = findElements;
function getTitle(context) {
    return context.title;
}
exports.getTitle = getTitle;
function getUrl(context) {
    return context.location.href;
}
exports.getUrl = getUrl;
function getCookies() {
    //@ts-ignore
    return Cypress.automation('get:cookies', {});
}
exports.getCookies = getCookies;
// export function takeScreenshot(page: Driver): Promise<Buffer>;
// export function visit(page: Driver, url: string): Promise<void>; (??)
// export function isStaleElementError(err: any): boolean;
