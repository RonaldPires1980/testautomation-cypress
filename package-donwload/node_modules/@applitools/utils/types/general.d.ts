export declare function getEnvValue<T extends 'boolean' | 'number' | 'string' = 'string'>(name: string, type?: T): T extends 'boolean' ? boolean : T extends 'number' ? number : string;
export declare function guid(): string;
export declare function jwtDecode(token: string): Record<string, any>;
export declare function sleep(ms: number): Promise<unknown>;
export declare function toJSON<TObject extends Record<PropertyKey, any>, TKey extends string, TProps extends Readonly<TKey[]>>(object: TObject, props: TProps): {
    [key in TProps[number]]: TObject[key] extends {
        toJSON(): any;
    } ? ReturnType<TObject[key]['toJSON']> : TObject[key];
};
export declare function toJSON<TObject extends Record<PropertyKey, any>, TKey extends string, TProps extends Readonly<Record<TKey, PropertyKey>>>(object: TObject, props: TProps): {
    [key in keyof TProps]: TObject[TProps[key]] extends {
        toJSON(): any;
    } ? ReturnType<TObject[TProps[key]]['toJSON']> : TObject[TProps[key]];
};
export declare function toJSON<TObject extends Record<PropertyKey, any>>(object: TObject): {
    [key in keyof Omit<TObject, symbol>]: TObject[key] extends {
        toJSON(): any;
    } ? ReturnType<TObject[key]['toJSON']> : TObject[key];
};
export declare function toString(object: Record<PropertyKey, any>): string;
export declare function pluralize(object: [] | number, config?: [manyCase: string, singleCase: string]): string;
