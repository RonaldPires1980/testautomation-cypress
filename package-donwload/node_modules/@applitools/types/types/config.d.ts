import { LogHandler, DebugScreenshotHandler } from './debug';
import { MatchSettings } from './setting';
import { Selector } from './driver';
import { SessionType, StitchMode, Size, Region, Proxy, AutProxy, Batch, CustomProperty, ImageRotation, ImageCropRect, ImageCropRegion, BrowserInfoRenderer } from './data';
export declare type EyesManagerConfig<TType extends 'vg' | 'classic' = 'vg' | 'classic'> = {
    type: TType;
    concurrency?: TType extends 'vg' ? number : never;
    legacy?: TType extends 'vg' ? boolean : never;
};
export declare type EyesConfig<TElement, TSelector> = EyesBaseConfig & EyesOpenConfig & EyesCheckConfig & EyesClassicConfig<TElement, TSelector> & EyesUFGConfig;
export declare type EyesBaseConfig = {
    logs?: LogHandler;
    debugScreenshots?: DebugScreenshotHandler;
    agentId?: string;
    apiKey?: string;
    serverUrl?: string;
    proxy?: Proxy;
    autProxy?: AutProxy;
    isDisabled?: boolean;
    connectionTimeout?: number;
    removeSession?: boolean;
    remoteEvents?: {
        serverUrl: string;
        accessKey?: string;
        timeout?: number;
    };
};
export declare type EyesOpenConfig = {
    appName?: string;
    testName?: string;
    userTestId?: string;
    displayName?: string;
    viewportSize?: Size;
    sessionType?: SessionType;
    properties?: CustomProperty[];
    batch?: Batch;
    defaultMatchSettings?: MatchSettings<Region>;
    hostApp?: string;
    hostOS?: string;
    hostAppInfo?: string;
    hostOSInfo?: string;
    deviceInfo?: string;
    baselineEnvName?: string;
    environmentName?: string;
    branchName?: string;
    parentBranchName?: string;
    baselineBranchName?: string;
    compareWithParentBranch?: boolean;
    ignoreBaseline?: boolean;
    ignoreGitMergeBase?: boolean;
    saveFailedTests?: boolean;
    saveNewTests?: boolean;
    saveDiffs?: boolean;
    dontCloseBatches?: boolean;
    useCeilForViewportSize?: boolean;
    keepPlatformNameAsIs?: boolean;
};
export declare type EyesCheckConfig = {
    sendDom?: boolean;
    matchTimeout?: number;
    forceFullPageScreenshot?: boolean;
};
export declare type EyesClassicConfig<TElement = unknown, TSelector = unknown> = {
    waitBeforeScreenshots?: number;
    stitchMode?: StitchMode;
    hideScrollbars?: boolean;
    hideCaret?: boolean;
    stitchOverlap?: number;
    scrollRootElement?: TElement | Selector<TSelector>;
    cut?: ImageCropRect | ImageCropRegion;
    rotation?: ImageRotation;
    scaleRatio?: number;
    waitBeforeCapture?: number;
};
export declare type EyesUFGConfig = {
    concurrentSessions?: number;
    browsersInfo?: BrowserInfoRenderer[];
    visualGridOptions?: Record<string, any>;
    layoutBreakpoints?: boolean | number[];
    disableBrowserFetching?: boolean;
};
