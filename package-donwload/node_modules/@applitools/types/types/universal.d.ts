import { UniversalSpecDriver } from './driver';
import { Core, EyesManager, Eyes } from './core';
declare type UnionToIntersection<TUnion> = (TUnion extends any ? (arg: TUnion) => any : never) extends (arg: infer TItem) => any ? TItem : never;
declare type InputType<TFunc> = TFunc extends (arg: infer TArg) => any ? TArg : never;
declare type OutputType<TFunc> = TFunc extends (...args: any) => infer TRes | Promise<infer TRes> ? Promise<Refify<TRes>> : never;
declare type Request<TTarget extends {
    [key in keyof TTarget]: (...args: any) => any;
}, TDomain extends string, TArg extends string = never, TName = keyof TTarget> = UnionToIntersection<TName extends string & keyof TTarget ? {
    request(name: `${TDomain}.${TName}`, options: InputType<TTarget[TName]> & {
        [key in TArg]: Ref<TTarget>;
    }): OutputType<TTarget[TName]>;
} : never>;
declare type Command<TTarget extends {
    [key in keyof TTarget]: (...args: any) => any;
}, TDomain extends string, TArg extends string = never, TName = keyof TTarget> = UnionToIntersection<TName extends string & keyof TTarget ? {
    command(name: `${TDomain}.${TName}`, handler: (options: InputType<TTarget[TName]> & {
        [key in TArg]: Ref<TTarget>;
    }) => OutputType<TTarget[TName]>): () => void;
} : never>;
interface Debug<TDriver, TContext, TElement, TSelector> {
    getHistory(): any;
    checkSpecDriver(options: {
        driver: TDriver;
        commands: (keyof UniversalSpecDriver<TDriver, TContext, TElement, TSelector>)[];
    }): any;
}
interface Server {
    getInfo(): Record<string, any>;
}
export declare type Ref<TValue = never> = {
    'applitools-ref-id': string;
};
export declare type Refify<TValue> = TValue extends string | number | boolean | null | undefined ? TValue : TValue extends Array<infer TItem> ? Refify<TItem>[] : Extract<TValue[keyof TValue], (...args: any) => any> extends never ? TValue : Ref<TValue>;
export declare type ClientSocket<TDriver, TContext, TElement, TSelector> = unknown & Request<Omit<Core<TDriver, TElement, TSelector>, 'isDriver' | 'isElement' | 'isSelector'>, 'Core'> & Request<EyesManager<TDriver, TElement, TSelector>, 'EyesManager', 'manager'> & Request<Eyes<TDriver, TElement, TSelector>, 'Eyes', 'eyes'> & Request<Server, 'Server'> & Request<Debug<TDriver, TContext, TElement, TSelector>, 'Debug'> & Command<UniversalSpecDriver<TDriver, TContext, TElement, TSelector>, 'Driver'>;
export declare type ServerSocket<TDriver, TContext, TElement, TSelector> = unknown & Command<Omit<Core<TDriver, TElement, TSelector>, 'isDriver' | 'isElement' | 'isSelector'>, 'Core'> & Command<EyesManager<TDriver, TElement, TSelector>, 'EyesManager', 'manager'> & Command<Eyes<TDriver, TElement, TSelector>, 'Eyes', 'eyes'> & Command<Server, 'Server'> & Command<Debug<TDriver, TContext, TElement, TSelector>, 'Debug'> & Request<UniversalSpecDriver<TDriver, TContext, TElement, TSelector>, 'Driver'>;
export {};
