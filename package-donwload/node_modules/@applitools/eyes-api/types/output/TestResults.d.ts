import { TestResultsStatus, TestResultsStatusEnum } from '../enums/TestResultsStatus';
import { RectangleSize, RectangleSizeData } from '../input/RectangleSize';
import { TestAccessibilityStatus } from './TestAccessibilityStatus';
import { SessionUrls, SessionUrlsData } from './SessionUrls';
import { StepInfo, StepInfoData } from './StepInfo';
export declare type TestResults = {
    readonly id?: string;
    readonly name?: string;
    readonly secretToken?: string;
    readonly status?: TestResultsStatus;
    readonly appName?: string;
    readonly batchId?: string;
    readonly batchName?: string;
    readonly branchName?: string;
    readonly hostOS?: string;
    readonly hostApp?: string;
    readonly hostDisplaySize?: RectangleSize;
    readonly accessibilityStatus?: TestAccessibilityStatus;
    readonly startedAt?: Date | string;
    readonly duration?: number;
    readonly isNew?: boolean;
    readonly isDifferent?: boolean;
    readonly isAborted?: boolean;
    readonly appUrls?: SessionUrls;
    readonly apiUrls?: SessionUrls;
    readonly stepsInfo?: StepInfo[];
    readonly steps?: number;
    readonly matches?: number;
    readonly mismatches?: number;
    readonly missing?: number;
    readonly exactMatches?: number;
    readonly strictMatches?: number;
    readonly contentMatches?: number;
    readonly layoutMatches?: number;
    readonly noneMatches?: number;
    readonly url?: string;
};
export declare type DeleteTestFunc = (options: {
    testId: string;
    batchId: string;
    secretToken: string;
}) => Promise<void>;
export declare class TestResultsData implements Required<TestResults> {
    private _results;
    private readonly _deleteTest;
    /** @internal */
    constructor(results?: TestResults, deleteTest?: DeleteTestFunc);
    get id(): string;
    getId(): string;
    /** @deprecated */
    setId(id: string): void;
    get name(): string;
    getName(): string;
    /** @deprecated */
    setName(name: string): void;
    get secretToken(): string;
    getSecretToken(): string;
    /** @deprecated */
    setSecretToken(secretToken: string): void;
    get status(): TestResultsStatus;
    getStatus(): TestResultsStatusEnum;
    /** @deprecated */
    setStatus(status: TestResultsStatusEnum): void;
    get appName(): string;
    getAppName(): string;
    /** @deprecated */
    setAppName(appName: string): void;
    get batchName(): string;
    getBatchName(): string;
    /** @deprecated */
    setBatchName(batchName: string): void;
    get batchId(): string;
    getBatchId(): string;
    /** @deprecated */
    setBatchId(batchId: string): void;
    get branchName(): string;
    getBranchName(): string;
    /** @deprecated */
    setBranchName(branchName: string): void;
    get hostOS(): string;
    getHostOS(): string;
    /** @deprecated */
    setHostOS(hostOS: string): void;
    get hostApp(): string;
    getHostApp(): string;
    /** @deprecated */
    setHostApp(hostApp: string): void;
    get hostDisplaySize(): RectangleSize;
    getHostDisplaySize(): RectangleSizeData;
    /** @deprecated */
    setHostDisplaySize(hostDisplaySize: RectangleSize): void;
    get accessibilityStatus(): TestAccessibilityStatus;
    getAccessibilityStatus(): TestAccessibilityStatus;
    /** @deprecated */
    setAccessibilityStatus(accessibilityStatus: TestAccessibilityStatus): void;
    get startedAt(): Date | string;
    getStartedAt(): Date;
    /** @deprecated */
    setStartedAt(startedAt: Date | string): void;
    get duration(): number;
    getDuration(): number;
    /** @deprecated */
    setDuration(duration: number): void;
    get isNew(): boolean;
    getIsNew(): boolean;
    /** @deprecated */
    setIsNew(isNew: boolean): void;
    get isDifferent(): boolean;
    getIsDifferent(): boolean;
    /** @deprecated */
    setIsDifferent(isDifferent: boolean): void;
    get isAborted(): boolean;
    getIsAborted(): boolean;
    /** @deprecated */
    setIsAborted(isAborted: boolean): void;
    get appUrls(): SessionUrls;
    getAppUrls(): SessionUrlsData;
    /** @deprecated */
    setAppUrls(appUrls: SessionUrls): void;
    get apiUrls(): SessionUrls;
    getApiUrls(): SessionUrlsData;
    /** @deprecated */
    setApiUrls(apiUrls: SessionUrls): void;
    get stepsInfo(): StepInfo[];
    getStepsInfo(): StepInfoData[];
    /** @deprecated */
    setStepsInfo(stepInfo: StepInfo[]): void;
    get steps(): number;
    getSteps(): number;
    /** @deprecated */
    setSteps(steps: number): void;
    get matches(): number;
    getMatches(): number;
    /** @deprecated */
    setMatches(matches: number): void;
    get mismatches(): number;
    getMismatches(): number;
    /** @deprecated */
    setMismatches(mismatches: number): void;
    get missing(): number;
    getMissing(): number;
    /** @deprecated */
    setMissing(missing: number): void;
    get exactMatches(): number;
    getExactMatches(): number;
    /** @deprecated */
    setExactMatches(exactMatches: number): void;
    get strictMatches(): number;
    getStrictMatches(): number;
    /** @deprecated */
    setStrictMatches(strictMatches: number): void;
    get contentMatches(): number;
    getContentMatches(): number;
    /** @deprecated */
    setContentMatches(contentMatches: number): void;
    get layoutMatches(): number;
    getLayoutMatches(): number;
    /** @deprecated */
    setLayoutMatches(layoutMatches: number): void;
    get noneMatches(): number;
    getNoneMatches(): number;
    /** @deprecated */
    setNoneMatches(noneMatches: number): void;
    get url(): string;
    getUrl(): string;
    /** @deprecated */
    setUrl(url: string): void;
    isPassed(): boolean;
    delete(): Promise<void>;
    /** @deprecated */
    deleteSession(): Promise<void>;
    /** @internal */
    toObject(): TestResults;
    /** @internal */
    toJSON(): TestResults;
    /** @internal */
    toString(): string;
}
