"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Eyes = void 0;
const utils = __importStar(require("@applitools/utils"));
const SessionType_1 = require("./enums/SessionType");
const EyesError_1 = require("./errors/EyesError");
const NewTestError_1 = require("./errors/NewTestError");
const DiffsFoundError_1 = require("./errors/DiffsFoundError");
const TestFailedError_1 = require("./errors/TestFailedError");
const CheckSettings_1 = require("./input/CheckSettings");
const Configuration_1 = require("./input/Configuration");
const RectangleSize_1 = require("./input/RectangleSize");
const LogHandler_1 = require("./input/LogHandler");
const MatchResult_1 = require("./output/MatchResult");
const TestResults_1 = require("./output/TestResults");
const SessionEventHandlers_1 = require("./SessionEventHandlers");
const Runners_1 = require("./Runners");
const Logger_1 = require("./Logger");
class Eyes {
    constructor(runnerOrConfig, config) {
        this._events = new Map();
        this._handlers = new SessionEventHandlers_1.SessionEventHandlers();
        if (utils.types.instanceOf(runnerOrConfig, Runners_1.EyesRunner)) {
            this._runner = runnerOrConfig;
            this._config = new Configuration_1.ConfigurationData(config);
        }
        else {
            this._runner = new Runners_1.ClassicRunner();
            this._config = new Configuration_1.ConfigurationData(runnerOrConfig !== null && runnerOrConfig !== void 0 ? runnerOrConfig : config);
        }
        this._runner.attach(this, this._spec);
        this._handlers.attach(this);
        this._logger = new Logger_1.Logger({ ...this._config.logs, label: 'Eyes API' });
    }
    get _spec() {
        return this.constructor._spec;
    }
    static async setViewportSize(driver, size) {
        await this._spec.setViewportSize({ driver, size });
    }
    get logger() {
        return this._logger;
    }
    getLogger() {
        return this._logger;
    }
    get runner() {
        return this._runner;
    }
    getRunner() {
        return this._runner;
    }
    get driver() {
        return this._driver;
    }
    getDriver() {
        return this._driver;
    }
    get configuration() {
        return this._config;
    }
    set configuration(config) {
        this._config = new Configuration_1.ConfigurationData(config);
    }
    getConfiguration() {
        return this._config;
    }
    setConfiguration(config) {
        this._config = new Configuration_1.ConfigurationData(config);
    }
    get isOpen() {
        return Boolean(this._eyes);
    }
    getIsOpen() {
        return this.isOpen;
    }
    on(event, handler) {
        if (utils.types.isFunction(event))
            [handler, event] = [event, '*'];
        let handlers = this._events.get(event);
        if (!handlers) {
            handlers = new Set();
            this._events.set(event, handlers);
        }
        handlers.add(handler);
        return () => handlers.delete(handler);
    }
    off(eventOrHandler) {
        if (utils.types.isString(eventOrHandler)) {
            this._events.delete(eventOrHandler);
        }
        else {
            this._events.forEach(handlers => handlers.delete(eventOrHandler));
        }
    }
    async open(driver, configOrAppName, testName, viewportSize, sessionType) {
        var _a;
        var _b;
        this._driver = driver;
        if (this._config.isDisabled)
            return driver;
        const config = this._config.toJSON();
        if (utils.types.instanceOf(configOrAppName, Configuration_1.ConfigurationData)) {
            Object.assign(config, configOrAppName.toJSON());
        }
        else if (utils.types.isObject(configOrAppName)) {
            Object.assign(config, configOrAppName);
        }
        else if (utils.types.isString(configOrAppName)) {
            config.appName = configOrAppName;
        }
        if (utils.types.isString(testName))
            config.testName = testName;
        if (utils.types.has(viewportSize, ['width', 'height']))
            config.viewportSize = viewportSize;
        if (utils.types.isEnumValue(sessionType, SessionType_1.SessionTypeEnum))
            config.sessionType = sessionType;
        // TODO remove when major version of sdk should be released
        config.keepPlatformNameAsIs = true;
        // TODO remove when major version of sdk should be released
        if (config.proxy)
            (_a = (_b = config.proxy).isHttpOnly) !== null && _a !== void 0 ? _a : (_b.isHttpOnly = false);
        this._eyes = await this._runner.openEyes({
            driver,
            config,
            on: (name, data) => {
                const globalHandlers = this._events.get('*');
                if (globalHandlers)
                    globalHandlers.forEach(async (handler) => handler(name, data));
                const namedHandlers = this._events.get(name);
                if (namedHandlers)
                    namedHandlers.forEach(async (handler) => handler(data));
            },
        });
        return new Proxy(this._driver, {
            get(target, key) {
                if (key === 'then')
                    return;
                return Reflect.get(target, key);
            },
        });
    }
    /** @deprecated */
    async checkWindow(name, timeout, fully = false) {
        return this.check({ name, timeout, fully });
    }
    /** @deprecated */
    async checkFrame(element, timeout, name) {
        return this.check({ name, frames: [element], timeout, fully: true });
    }
    /** @deprecated */
    async checkElement(element, timeout, name) {
        return this.check({ name, region: element, timeout, fully: true });
    }
    /** @deprecated */
    async checkElementBy(selector, timeout, name) {
        return this.check({ name, region: selector, timeout, fully: true });
    }
    /** @deprecated */
    async checkRegion(region, name, timeout) {
        return this.check({ name, region, timeout });
    }
    /** @deprecated */
    async checkRegionByElement(element, name, timeout) {
        return this.check({ name, region: element, timeout });
    }
    /** @deprecated */
    async checkRegionBy(selector, name, timeout, fully = false) {
        return this.check({ name, region: selector, timeout, fully });
    }
    /** @deprecated */
    async checkRegionInFrame(frame, selector, timeout, name, fully = false) {
        return this.check({ name, region: selector, frames: [frame], timeout, fully });
    }
    async check(checkSettingsOrName, checkSettings) {
        var _a, _b;
        var _c;
        if (this._config.isDisabled)
            return null;
        if (!this.isOpen)
            throw new EyesError_1.EyesError('Eyes not open');
        let settings;
        if (utils.types.isString(checkSettingsOrName)) {
            utils.guard.notNull(checkSettings, { name: 'checkSettings' });
            settings = utils.types.instanceOf(checkSettings, CheckSettings_1.CheckSettingsFluent)
                ? checkSettings.name(checkSettingsOrName).toJSON()
                : { ...checkSettings, name: checkSettingsOrName };
        }
        else {
            settings = utils.types.instanceOf(checkSettingsOrName, CheckSettings_1.CheckSettingsFluent)
                ? checkSettingsOrName.toJSON()
                : { ...checkSettingsOrName };
        }
        const config = this._config.toJSON();
        // TODO remove when major version of sdk should be released
        if (config.proxy)
            (_a = (_c = config.proxy).isHttpOnly) !== null && _a !== void 0 ? _a : (_c.isHttpOnly = false);
        // TODO remove when major version of sdk should be released
        (_b = config.forceFullPageScreenshot) !== null && _b !== void 0 ? _b : (config.forceFullPageScreenshot = false);
        const result = await this._eyes.check({ settings, config });
        return new MatchResult_1.MatchResultData(result);
    }
    async locate(settings) {
        var _a;
        var _b;
        if (this._config.isDisabled)
            return null;
        if (!this.isOpen)
            throw new EyesError_1.EyesError('Eyes not open');
        const config = this._config.toJSON();
        // TODO remove when major version of sdk should be released
        if (config.proxy)
            (_a = (_b = config.proxy).isHttpOnly) !== null && _a !== void 0 ? _a : (_b.isHttpOnly = false);
        return this._eyes.locate({ settings, config });
    }
    async extractTextRegions(settings) {
        var _a;
        var _b;
        if (this._config.isDisabled)
            return null;
        if (!this.isOpen)
            throw new EyesError_1.EyesError('Eyes not open');
        const config = this._config.toJSON();
        // TODO remove when major version of sdk should be released
        if (config.proxy)
            (_a = (_b = config.proxy).isHttpOnly) !== null && _a !== void 0 ? _a : (_b.isHttpOnly = false);
        return this._eyes.extractTextRegions({ settings, config });
    }
    async extractText(regions) {
        var _a;
        var _b;
        if (this._config.isDisabled)
            return null;
        if (!this.isOpen)
            throw new EyesError_1.EyesError('Eyes not open');
        const config = this._config.toJSON();
        // TODO remove when major version of sdk should be released
        if (config.proxy)
            (_a = (_b = config.proxy).isHttpOnly) !== null && _a !== void 0 ? _a : (_b.isHttpOnly = false);
        return this._eyes.extractText({ regions, config });
    }
    async close(throwErr = true) {
        var _a;
        if (this._config.isDisabled)
            return null;
        if (!this.isOpen)
            throw new EyesError_1.EyesError('Eyes not open');
        const deleteTest = (options) => this._spec.deleteTest({
            ...options,
            serverUrl: this._config.serverUrl,
            apiKey: this._config.apiKey,
            proxy: this._config.proxy,
        });
        try {
            const [result] = await this._eyes.close({ throwErr });
            return new TestResults_1.TestResultsData(result, deleteTest);
        }
        catch (err) {
            if (!((_a = err.info) === null || _a === void 0 ? void 0 : _a.testResult))
                throw err;
            const testResult = new TestResults_1.TestResultsData(err.info.testResult, deleteTest);
            if (err.reason === 'test failed') {
                throw new TestFailedError_1.TestFailedError(err.message, testResult);
            }
            else if (err.reason === 'test different') {
                throw new DiffsFoundError_1.DiffsFoundError(err.message, testResult);
            }
            else if (err.reason === 'test new') {
                throw new NewTestError_1.NewTestError(err.message, testResult);
            }
        }
        finally {
            this._eyes = null;
        }
    }
    /** @deprecated */
    async closeAsync() {
        await this.close(false);
    }
    async abort() {
        if (!this.isOpen || this._config.isDisabled)
            return null;
        return this._eyes
            .abort()
            .then(([result]) => {
            return new TestResults_1.TestResultsData(result, settings => this._spec.deleteTest({
                settings: {
                    ...settings,
                    serverUrl: this._config.serverUrl,
                    apiKey: this._config.apiKey,
                    proxy: this._config.proxy,
                },
            }));
        })
            .finally(() => (this._eyes = null));
    }
    /** @deprecated */
    async abortAsync() {
        await this.abort();
    }
    /** @deprecated */
    async abortIfNotClosed() {
        return this.abort();
    }
    // #region CONFIG
    async getViewportSize() {
        return (this._config.getViewportSize() || new RectangleSize_1.RectangleSizeData(await this._spec.getViewportSize({ driver: this._driver })));
    }
    async setViewportSize(size) {
        utils.guard.notNull(size, { name: 'size' });
        if (!this._driver) {
            this._config.setViewportSize(size);
        }
        else {
            try {
                await this._spec.setViewportSize({ driver: this._driver, size });
                this._config.setViewportSize(size);
            }
            catch (err) {
                this._config.setViewportSize(await this._spec.getViewportSize({ driver: this._driver }));
                throw new TestFailedError_1.TestFailedError('Failed to set the viewport size');
            }
        }
    }
    getScrollRootElement() {
        return this._config.getScrollRootElement();
    }
    setScrollRootElement(scrollRootElement) {
        this._config.setScrollRootElement(scrollRootElement);
    }
    setLogHandler(handler) {
        this._config.setLogHandler(handler);
    }
    getLogHandler() {
        const handler = this._config.getLogHandler();
        if (!handler) {
            return new LogHandler_1.NullLogHandlerData();
        }
        else if (!utils.types.has(handler, 'type')) {
            return handler;
        }
        else if (handler.type === 'file') {
            return new LogHandler_1.FileLogHandlerData(true, handler.filename, handler.append);
        }
        else if (handler.type === 'console') {
            return new LogHandler_1.ConsoleLogHandlerData(true);
        }
    }
    setCutProvider(cutProvider) {
        this._config.setCut(cutProvider);
    }
    setImageCut(cutProvider) {
        this.setCutProvider(cutProvider);
    }
    getIsCutProviderExplicitlySet() {
        return Boolean(this._config.getCut());
    }
    getRotation() {
        return this._config.getRotation();
    }
    setRotation(rotation) {
        this._config.setRotation(rotation);
    }
    getScaleRatio() {
        return this._config.getScaleRatio();
    }
    setScaleRatio(scaleRatio) {
        this._config.setScaleRatio(scaleRatio);
    }
    getSaveDebugScreenshots() {
        return this._config.getSaveDebugScreenshots();
    }
    setSaveDebugScreenshots(save) {
        this._config.setSaveDebugScreenshots(save);
    }
    getDebugScreenshotsPath() {
        return this._config.getDebugScreenshotsPath();
    }
    setDebugScreenshotsPath(path) {
        this._config.setDebugScreenshotsPath(path);
    }
    getDebugScreenshotsPrefix() {
        return this._config.getDebugScreenshotsPrefix();
    }
    setDebugScreenshotsPrefix(prefix) {
        this._config.setDebugScreenshotsPrefix(prefix);
    }
    addProperty(name, value) {
        return this._config.addProperty(name, value);
    }
    clearProperties() {
        return this._config.setProperties([]);
    }
    getBatch() {
        return this._config.getBatch();
    }
    setBatch(batchOrName, id, startedAt) {
        if (utils.types.isString(batchOrName)) {
            this._config.setBatch({ name: batchOrName, id, startedAt: new Date(startedAt) });
        }
        else {
            this._config.setBatch(batchOrName);
        }
    }
    getApiKey() {
        return this._config.getApiKey();
    }
    setApiKey(apiKey) {
        this._config.setApiKey(apiKey);
    }
    getTestName() {
        return this._config.getTestName();
    }
    setTestName(testName) {
        this._config.setTestName(testName);
    }
    getAppName() {
        return this._config.getAppName();
    }
    setAppName(appName) {
        this._config.setAppName(appName);
    }
    getBaselineBranchName() {
        return this._config.getBaselineBranchName();
    }
    setBaselineBranchName(baselineBranchName) {
        this._config.setBaselineBranchName(baselineBranchName);
    }
    /** @deprecated */
    getBaselineName() {
        return this.getBaselineEnvName();
    }
    /** @deprecated */
    setBaselineName(baselineName) {
        this.setBaselineEnvName(baselineName);
    }
    getBaselineEnvName() {
        return this._config.getBaselineEnvName();
    }
    setBaselineEnvName(baselineEnvName) {
        this._config.setBaselineEnvName(baselineEnvName);
    }
    getBranchName() {
        return this._config.getBranchName();
    }
    setBranchName(branchName) {
        this._config.setBranchName(branchName);
    }
    getHostApp() {
        return this._config.getHostApp();
    }
    setHostApp(hostApp) {
        this._config.setHostApp(hostApp);
    }
    getHostOS() {
        return this._config.getHostOS();
    }
    setHostOS(hostOS) {
        this._config.setHostOS(hostOS);
    }
    getHostAppInfo() {
        return this._config.getHostAppInfo();
    }
    setHostAppInfo(hostAppInfo) {
        this._config.setHostAppInfo(hostAppInfo);
    }
    getHostOSInfo() {
        return this._config.getHostOSInfo();
    }
    setHostOSInfo(hostOSInfo) {
        this._config.setHostOSInfo(hostOSInfo);
    }
    getDeviceInfo() {
        return this._config.getDeviceInfo();
    }
    setDeviceInfo(deviceInfo) {
        this._config.setDeviceInfo(deviceInfo);
    }
    setIgnoreCaret(ignoreCaret) {
        this._config.setIgnoreCaret(ignoreCaret);
    }
    getIgnoreCaret() {
        return this._config.getIgnoreCaret();
    }
    getIsDisabled() {
        return this._config.getIsDisabled();
    }
    setIsDisabled(isDisabled) {
        this._config.setIsDisabled(isDisabled);
    }
    getMatchLevel() {
        return this._config.getMatchLevel();
    }
    setMatchLevel(matchLevel) {
        this._config.setMatchLevel(matchLevel);
    }
    getMatchTimeout() {
        return this._config.getMatchTimeout();
    }
    setMatchTimeout(matchTimeout) {
        this._config.setMatchTimeout(matchTimeout);
    }
    getParentBranchName() {
        return this._config.getParentBranchName();
    }
    setParentBranchName(parentBranchName) {
        this._config.setParentBranchName(parentBranchName);
    }
    setProxy(proxyOrUrlOrIsDisabled, username, password, isHttpOnly) {
        this._config.setProxy(proxyOrUrlOrIsDisabled, username, password, isHttpOnly);
        return this;
    }
    getProxy() {
        return this._config.getProxy();
    }
    getSaveDiffs() {
        return this._config.saveDiffs;
    }
    setSaveDiffs(saveDiffs) {
        this._config.saveDiffs = saveDiffs;
    }
    getSaveNewTests() {
        return this._config.saveNewTests;
    }
    setSaveNewTests(saveNewTests) {
        this._config.saveNewTests = saveNewTests;
    }
    getServerUrl() {
        return this._config.getServerUrl();
    }
    setServerUrl(serverUrl) {
        this._config.setServerUrl(serverUrl);
    }
    getSendDom() {
        return this._config.getSendDom();
    }
    setSendDom(sendDom) {
        this._config.setSendDom(sendDom);
    }
    getHideCaret() {
        return this._config.getHideCaret();
    }
    setHideCaret(hideCaret) {
        this._config.setHideCaret(hideCaret);
    }
    getHideScrollbars() {
        return this._config.getHideScrollbars();
    }
    setHideScrollbars(hideScrollbars) {
        this._config.setHideScrollbars(hideScrollbars);
    }
    getForceFullPageScreenshot() {
        return this._config.getForceFullPageScreenshot();
    }
    setForceFullPageScreenshot(forceFullPageScreenshot) {
        this._config.setForceFullPageScreenshot(forceFullPageScreenshot);
    }
    getWaitBeforeScreenshots() {
        return this._config.getWaitBeforeScreenshots();
    }
    setWaitBeforeScreenshots(waitBeforeScreenshots) {
        this._config.setWaitBeforeScreenshots(waitBeforeScreenshots);
    }
    getStitchMode() {
        return this._config.getStitchMode();
    }
    setStitchMode(stitchMode) {
        this._config.setStitchMode(stitchMode);
    }
    getStitchOverlap() {
        return this._config.getStitchOverlap();
    }
    setStitchOverlap(stitchOverlap) {
        this._config.setStitchOverlap(stitchOverlap);
    }
    /**
     * @undocumented
     * @deprecated
     */
    getSessionEventHandlers() {
        return this._handlers;
    }
    /**
     * @undocumented
     * @deprecated
     */
    addSessionEventHandler(handler) {
        if (handler instanceof SessionEventHandlers_1.RemoteSessionEventHandler) {
            this._config.setRemoteEvents(handler.toJSON());
        }
        else {
            this._handlers.addEventHandler(handler);
        }
    }
    /**
     * @undocumented
     * @deprecated
     */
    removeSessionEventHandler(handler) {
        if (handler instanceof SessionEventHandlers_1.RemoteSessionEventHandler) {
            this._config.setRemoteEvents(null);
        }
        else {
            this._handlers.removeEventHandler(handler);
        }
    }
    /**
     * @undocumented
     * @deprecated
     */
    clearSessionEventHandlers() {
        return this._handlers.clearEventHandlers();
    }
}
exports.Eyes = Eyes;
