"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeProxy = void 0;
const incoming_message_1 = require("./incoming-message");
const http_1 = require("http");
const https_1 = require("https");
const dns_1 = require("dns");
const proxy_agent_1 = __importDefault(require("proxy-agent"));
const utils = __importStar(require("@applitools/utils"));
function makeProxy(defaultOptions) {
    const resolveUrl = (defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.resolveUrls) ? makeResolveUrl() : (url) => url;
    return async function proxyRequest({ request, response, options, logger, }) {
        var _a, _b, _c, _d, _e, _f;
        options = Object.assign(Object.assign({}, defaultOptions), options);
        const isProxyRequest = !options.url && /^http/.test(request.url);
        const requestOptions = {
            url: isProxyRequest
                ? request.url
                : new URL(`.${request.url}` /* relative path */, await resolveUrl(options.url, { logger })),
            method: (_a = options.method) !== null && _a !== void 0 ? _a : request.method,
            headers: Object.assign(Object.assign({}, request.headers), options.headers),
            body: (_b = options.body) !== null && _b !== void 0 ? _b : request,
            proxy: options.proxy,
            signal: options.signal,
        };
        requestOptions.headers.host = new URL(isProxyRequest ? request.url : options.url).host;
        if (!utils.types.isFunction(requestOptions.body, 'pipe')) {
            requestOptions.headers['Content-Length'] = Buffer.byteLength(requestOptions.body).toString();
        }
        const modifiedRequestOptions = (_d = (await ((_c = options.modifyRequest) === null || _c === void 0 ? void 0 : _c.call(options, requestOptions)))) !== null && _d !== void 0 ? _d : requestOptions;
        let proxyResponse;
        for (let attempt = 1; attempt <= 10; ++attempt) {
            try {
                proxyResponse = await send(modifiedRequestOptions);
                if (!(await ((_e = options.shouldRetry) === null || _e === void 0 ? void 0 : _e.call(options, proxyResponse))))
                    break;
                logger.error(`Attempt (${attempt}) to proxy request finished with unexpected status ${proxyResponse.statusCode}`);
                await utils.general.sleep((_f = options.retryTimeout) !== null && _f !== void 0 ? _f : 5000);
            }
            catch (error) {
                if (utils.types.instanceOf(error, 'AbortError'))
                    throw error;
                logger.error(`Attempt (${attempt}) to proxy request failed with error`, error);
                if (attempt + 1 >= 10)
                    throw error;
            }
        }
        if (request.httpVersion === '1.0') {
            proxyResponse.headers.connection = proxyResponse.headers.connection || 'close';
        }
        else if (request.httpVersion !== '2.0' && !proxyResponse.headers.connection) {
            proxyResponse.headers.connection = request.headers.connection || 'keep-alive';
        }
        response.sendDate = false;
        response.writeHead(proxyResponse.statusCode, proxyResponse.headers);
        if (options.handle !== false)
            proxyResponse.pipe(response);
        return proxyResponse;
        async function send(requestOptions) {
            const sendRequest = new URL(requestOptions.url).protocol === 'https:' ? https_1.request : http_1.request;
            return new Promise((resolve, reject) => {
                const request = sendRequest(requestOptions.url, Object.assign(Object.assign({}, requestOptions), { agent: new proxy_agent_1.default(requestOptions.proxy) }));
                request.on('error', reject);
                request.on('response', response => resolve((0, incoming_message_1.modifyIncomingMessage)(response)));
                if (requestOptions.body && utils.types.isFunction(requestOptions.body, 'pipe')) {
                    requestOptions.body.pipe(request);
                }
                else {
                    request.write(requestOptions.body);
                    request.end();
                }
            });
        }
    };
}
exports.makeProxy = makeProxy;
function makeResolveUrl() {
    const resolvedHosts = new Map();
    return async function resolve(unresolvedUrl, { logger }) {
        const url = new URL(unresolvedUrl);
        let hostname = resolvedHosts.get(url.hostname);
        if (!hostname) {
            hostname = new Promise(resolve => {
                (0, dns_1.resolve)(url.hostname, (err, addresses) => {
                    if (!err) {
                        resolvedHosts.set(url.hostname, addresses[0]);
                        logger.log(`Addresses were successfully resolved for url ${url.href} - ${addresses.join(', ')}`);
                        resolve(addresses[0]);
                    }
                    else {
                        logger.error(`Failed to resolve address for url ${url.href}`, err);
                        resolve(url.hostname);
                    }
                });
            });
            resolvedHosts.set(url.hostname, hostname);
        }
        url.hostname = await hostname;
        return url;
    };
}
