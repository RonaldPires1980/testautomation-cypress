"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeTunnelManager = void 0;
const node_fetch_1 = __importStar(require("node-fetch"));
const utils = __importStar(require("@applitools/utils"));
const RETRY_ERROR_CODES = ['CONCURRENCY_LIMIT_REACHED', 'NO_AVAILABLE_TUNNEL_PROXY'];
const RETRY_BACKOFF = [].concat(Array(5).fill(2000), // 5 tries with delay 2s (total 10s)
Array(4).fill(5000), // 4 tries with delay 5s (total 20s)
10000);
function makeTunnelManager({ egTunnelUrl, logger }) {
    return { createTunnel, deleteTunnel };
    async function createTunnel({ eyesServerUrl, apiKey }) {
        var _a, _b;
        const request = new node_fetch_1.Request(`${egTunnelUrl}/tunnels`, {
            method: 'POST',
            headers: new node_fetch_1.Headers(Object.assign({ 'x-eyes-api-key': apiKey }, (eyesServerUrl ? { 'x-eyes-server-url': eyesServerUrl } : {}))),
        });
        let attempt = 0;
        while (true) {
            const response = await (0, node_fetch_1.default)(request);
            const body = await response.json().catch(() => null);
            if (response.status === 201)
                return body;
            if (!RETRY_ERROR_CODES.includes(body === null || body === void 0 ? void 0 : body.message) && response.status >= 400 && response.status < 500) {
                logger.error(`Failed to create tunnel with status ${response.status} and code ${(_a = body === null || body === void 0 ? void 0 : body.message) !== null && _a !== void 0 ? _a : 'UNKNOWN_ERROR'}`);
                throw new Error(`Failed to create tunnel with code ${(_b = body === null || body === void 0 ? void 0 : body.message) !== null && _b !== void 0 ? _b : 'UNKNOWN_ERROR'}`);
            }
            logger.log(`Failed to create tunnel with code ${body.message}. Retrying...`);
            await utils.general.sleep(RETRY_BACKOFF[Math.min(attempt, RETRY_BACKOFF.length - 1)]);
            attempt += 1;
        }
    }
    async function deleteTunnel({ tunnelId, eyesServerUrl, apiKey, }) {
        var _a, _b;
        const request = new node_fetch_1.Request(`${egTunnelUrl}/tunnels/${tunnelId}`, {
            method: 'DELETE',
            headers: new node_fetch_1.Headers(Object.assign({ 'x-eyes-api-key': apiKey }, (eyesServerUrl ? { 'x-eyes-server-url': eyesServerUrl } : {}))),
        });
        let attempt = 0;
        while (true) {
            const response = await (0, node_fetch_1.default)(request);
            if (response.status === 200)
                return;
            if (response.status >= 400 && response.status < 500) {
                const body = await response.json().catch(() => null);
                logger.error(`Failed to delete tunnel with status ${response.status} and code ${(_a = body === null || body === void 0 ? void 0 : body.message) !== null && _a !== void 0 ? _a : 'UNKNOWN_ERROR'}`);
                throw new Error(`Failed to delete tunnel with code ${(_b = body === null || body === void 0 ? void 0 : body.message) !== null && _b !== void 0 ? _b : 'UNKNOWN_ERROR'}`);
            }
            await utils.general.sleep(RETRY_BACKOFF[Math.min(attempt, RETRY_BACKOFF.length - 1)]);
            attempt += 1;
        }
    }
}
exports.makeTunnelManager = makeTunnelManager;
