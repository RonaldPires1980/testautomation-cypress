/// <reference types="node" />
import { type Readable } from 'stream';
import { type AbortSignal } from 'abort-controller';
import { type Logger } from '@applitools/logger';
import { type ModifiedIncomingMessage } from './incoming-message';
import { type ServerResponse } from 'http';
declare type RequestOptions = {
    url?: URL | string;
    method: string;
    headers?: Record<string, string | string[]>;
    body?: string | Buffer | Readable;
    proxy?: string;
    signal?: AbortSignal;
};
declare type ProxyOptions = Partial<RequestOptions> & {
    handle?: boolean;
    modifyRequest?: (options: RequestOptions) => Promise<RequestOptions> | RequestOptions;
    shouldRetry?: (proxyResponse: ModifiedIncomingMessage) => Promise<boolean> | boolean;
    retryTimeout?: number;
};
export declare function makeProxy(defaultOptions?: Partial<ProxyOptions> & {
    resolveUrls?: boolean;
}): ({ request, response, options, logger, }: {
    request: ModifiedIncomingMessage;
    response: ServerResponse;
    options?: ProxyOptions;
    logger: Logger;
}) => Promise<ModifiedIncomingMessage>;
export {};
