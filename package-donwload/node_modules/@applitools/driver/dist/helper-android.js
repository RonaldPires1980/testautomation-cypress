"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelperAndroid = void 0;
class HelperAndroid {
    constructor(options) {
        this._spec = options.spec;
        this._input = options.input;
        this._action = options.action;
        this._legacy = options.legacy;
        this._logger = options.logger;
        this.name = this._legacy ? 'android-legacy' : 'android';
    }
    static async make(options) {
        const { spec, driver, logger } = options;
        let legacy = false;
        let input = await driver.element({ type: 'xpath', selector: '//*[@content-desc="EyesAppiumHelperEDT"]' });
        if (!input) {
            legacy = true;
            input = await driver.element({ type: 'xpath', selector: '//*[@content-desc="EyesAppiumHelper"]' });
        }
        const action = !legacy
            ? await driver.element({ type: 'xpath', selector: '//*[@content-desc="EyesAppiumHelper_Action"]' })
            : null;
        return input
            ? new HelperAndroid({ spec, input, action, legacy, logger })
            : null;
    }
    async _getElementId(element) {
        const resourceId = await element.getAttribute('resource-id');
        if (!resourceId)
            return null;
        return resourceId.split('/')[1];
    }
    async _command(command) {
        await this._input.type(command);
        await this._input.click();
        let text = await this._input.getText();
        if (this._action && text === command) {
            await this._action.type('1').catch(() => null);
            text = await this._input.getText();
        }
        await this._input.type('');
        return text;
    }
    async getContentRegion(element) {
        let contentHeightString;
        if (this._legacy) {
            await this._input.click();
            contentHeightString = await this._input.getText();
        }
        else {
            const elementId = await this._getElementId(element);
            if (!elementId)
                return null;
            contentHeightString = await this._command(`offset;${elementId};0;0;0`);
        }
        const region = await this._spec.getElementRegion(this._input.driver.target, element.target);
        const contentHeight = Number(contentHeightString);
        return !Number.isNaN(contentHeight) && contentHeight >= region.height
            ? { x: region.x, y: region.y, width: region.width, height: contentHeight }
            : null;
    }
    async getTouchPadding() {
        if (this._legacy)
            return null;
        const touchPaddingString = await this._command(`getTouchPadding;0;0;0;0`);
        const touchPadding = Number(touchPaddingString);
        if (!touchPadding || Number.isNaN(touchPadding))
            return null;
        return touchPadding;
    }
    async getRegion(element) {
        if (this._legacy)
            return null;
        const elementId = await this._getElementId(element);
        if (!elementId)
            return null;
        const regionString = await this._command(`getRect;${elementId};0;0`);
        if (!regionString)
            return null;
        const [, x, y, height, width] = regionString.match(/\[(-?\d+(?:\.\d+)?);(-?\d+(?:\.\d+)?);(-?\d+(?:\.\d+)?);(-?\d+(?:\.\d+)?)\]/);
        const region = { x: Number(x), y: Number(y), width: Number(width), height: Number(height) };
        if (Number.isNaN(region.x + region.y + region.width + region.height))
            return null;
        return region;
    }
    async scrollToTop(element) {
        if (this._legacy)
            return null;
        const elementId = await this._getElementId(element);
        if (!elementId)
            return null;
        await this._command(`moveToTop;${elementId};0;-1`);
    }
    async scrollBy(element, offset) {
        if (this._legacy)
            return null;
        const elementId = await this._getElementId(element);
        if (!elementId)
            return null;
        await this._command(`scroll;${elementId};${offset.y};0;0`);
    }
}
exports.HelperAndroid = HelperAndroid;
