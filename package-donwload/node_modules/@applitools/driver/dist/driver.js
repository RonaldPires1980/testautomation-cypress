"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Driver = void 0;
const logger_1 = require("@applitools/logger");
const utils = __importStar(require("@applitools/utils"));
const specUtils = __importStar(require("./spec-utils"));
const context_1 = require("./context");
const helper_ios_1 = require("./helper-ios");
const helper_android_1 = require("./helper-android");
const user_agent_1 = require("./user-agent");
const capabilities_1 = require("./capabilities");
const snippets = require('@applitools/snippets');
// eslint-disable-next-line
class Driver {
    constructor(options) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        if (options.driver instanceof Driver)
            return options.driver;
        this._customConfig = (_a = options.customConfig) !== null && _a !== void 0 ? _a : {};
        this._spec = options.spec;
        this._logger = (_c = (_b = options.logger) === null || _b === void 0 ? void 0 : _b.extend({ label: 'driver' })) !== null && _c !== void 0 ? _c : (0, logger_1.makeLogger)({ label: 'driver' });
        if (this._spec.isDriver(options.driver)) {
            this._target = (_f = (_e = (_d = this._spec).transformDriver) === null || _e === void 0 ? void 0 : _e.call(_d, options.driver)) !== null && _f !== void 0 ? _f : options.driver;
        }
        else {
            throw new TypeError('Driver constructor called with argument of unknown type!');
        }
        this._mainContext = new context_1.Context({
            spec: this._spec,
            context: (_j = (_h = (_g = this._spec).extractContext) === null || _h === void 0 ? void 0 : _h.call(_g, this._target)) !== null && _j !== void 0 ? _j : this._target,
            driver: this,
            logger: this._logger,
        });
        this._currentContext = this._mainContext;
    }
    get target() {
        return this._target;
    }
    get currentContext() {
        return this._currentContext;
    }
    get mainContext() {
        return this._mainContext;
    }
    get helper() {
        return this._helper;
    }
    get features() {
        var _a;
        return (_a = this._driverInfo) === null || _a === void 0 ? void 0 : _a.features;
    }
    get deviceName() {
        var _a;
        return (_a = this._driverInfo) === null || _a === void 0 ? void 0 : _a.deviceName;
    }
    get platformName() {
        var _a;
        return (_a = this._driverInfo) === null || _a === void 0 ? void 0 : _a.platformName;
    }
    get platformVersion() {
        var _a;
        return (_a = this._driverInfo) === null || _a === void 0 ? void 0 : _a.platformVersion;
    }
    get browserName() {
        var _a;
        return (_a = this._driverInfo) === null || _a === void 0 ? void 0 : _a.browserName;
    }
    get browserVersion() {
        var _a;
        return (_a = this._driverInfo) === null || _a === void 0 ? void 0 : _a.browserVersion;
    }
    get userAgent() {
        var _a;
        return (_a = this._driverInfo) === null || _a === void 0 ? void 0 : _a.userAgent;
    }
    get orientation() {
        return this._driverInfo.orientation;
    }
    get pixelRatio() {
        var _a;
        return (_a = this._driverInfo.pixelRatio) !== null && _a !== void 0 ? _a : 1;
    }
    get viewportScale() {
        var _a;
        return (_a = this._driverInfo.viewportScale) !== null && _a !== void 0 ? _a : 1;
    }
    get statusBarSize() {
        var _a;
        return (_a = this._driverInfo.statusBarSize) !== null && _a !== void 0 ? _a : (this.isNative ? 0 : undefined);
    }
    get navigationBarSize() {
        var _a;
        return (_a = this._driverInfo.navigationBarSize) !== null && _a !== void 0 ? _a : (this.isNative ? 0 : undefined);
    }
    get isNative() {
        var _a, _b;
        return (_b = (_a = this._driverInfo) === null || _a === void 0 ? void 0 : _a.isNative) !== null && _b !== void 0 ? _b : false;
    }
    get isWeb() {
        return !this.isNative;
    }
    get isMobile() {
        var _a, _b;
        return (_b = (_a = this._driverInfo) === null || _a === void 0 ? void 0 : _a.isMobile) !== null && _b !== void 0 ? _b : false;
    }
    get isIOS() {
        var _a;
        return ((_a = this.platformName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'ios';
    }
    get isAndroid() {
        var _a;
        return ((_a = this.platformName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'android';
    }
    get isIE() {
        return /(internet explorer|ie)/i.test(this.browserName);
    }
    get isEdgeLegacy() {
        return /edge/i.test(this.browserName) && Number(this.browserVersion) <= 44;
    }
    updateCurrentContext(context) {
        this._currentContext = context;
    }
    async init() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
        var _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14;
        const capabilities = await ((_b = (_a = this._spec).getCapabilities) === null || _b === void 0 ? void 0 : _b.call(_a, this.target));
        this._logger.log('Driver capabilities', capabilities);
        const capabilitiesInfo = capabilities ? (0, capabilities_1.parseCapabilities)(capabilities, this._customConfig) : undefined;
        const driverInfo = await ((_d = (_c = this._spec).getDriverInfo) === null || _d === void 0 ? void 0 : _d.call(_c, this.target));
        this._driverInfo = { ...capabilitiesInfo, ...driverInfo };
        if (this.isMobile) {
            this._driverInfo.orientation =
                (_e = (await this.getOrientation().catch(() => undefined))) !== null && _e !== void 0 ? _e : this._driverInfo.orientation;
        }
        if (this.isWeb) {
            (_f = (_3 = this._driverInfo).pixelRatio) !== null && _f !== void 0 ? _f : (_3.pixelRatio = await this.execute(snippets.getPixelRatio));
            (_g = (_4 = this._driverInfo).viewportScale) !== null && _g !== void 0 ? _g : (_4.viewportScale = await this.execute(snippets.getViewportScale));
            (_h = (_5 = this._driverInfo).userAgent) !== null && _h !== void 0 ? _h : (_5.userAgent = await this.execute(snippets.getUserAgent));
            if (this._driverInfo.userAgent) {
                const userAgentInfo = (0, user_agent_1.parseUserAgent)(this._driverInfo.userAgent);
                this._driverInfo.browserName = (_j = userAgentInfo.browserName) !== null && _j !== void 0 ? _j : this._driverInfo.browserName;
                this._driverInfo.browserVersion = (_k = userAgentInfo.browserVersion) !== null && _k !== void 0 ? _k : this._driverInfo.browserVersion;
                if (this._driverInfo.isMobile) {
                    (_l = (_6 = this._driverInfo).platformName) !== null && _l !== void 0 ? _l : (_6.platformName = userAgentInfo.platformName);
                    (_m = (_7 = this._driverInfo).platformVersion) !== null && _m !== void 0 ? _m : (_7.platformVersion = userAgentInfo.platformVersion);
                }
                else {
                    this._driverInfo.platformName = (_o = userAgentInfo.platformName) !== null && _o !== void 0 ? _o : this._driverInfo.platformName;
                    this._driverInfo.platformVersion = (_p = userAgentInfo.platformVersion) !== null && _p !== void 0 ? _p : this._driverInfo.platformVersion;
                }
            }
            (_q = (_8 = this._driverInfo).features) !== null && _q !== void 0 ? _q : (_8.features = {});
            (_r = (_9 = this._driverInfo.features).allCookies) !== null && _r !== void 0 ? _r : (_9.allCookies = /chrome/i.test(this._driverInfo.browserName) && !this._driverInfo.isMobile);
        }
        else {
            // this value always excludes the height of the navigation bar, and sometimes it also excludes the height of the status bar
            let windowSize = await this._spec.getWindowSize(this.target);
            (_s = (_10 = this._driverInfo).displaySize) !== null && _s !== void 0 ? _s : (_10.displaySize = windowSize);
            if (((_t = this.orientation) === null || _t === void 0 ? void 0 : _t.startsWith('landscape')) &&
                this._driverInfo.displaySize.height > this._driverInfo.displaySize.width) {
                this._driverInfo.displaySize = {
                    width: this._driverInfo.displaySize.height,
                    height: this._driverInfo.displaySize.width,
                };
            }
            if (this.isAndroid) {
                // bar sizes could be extracted only on android
                const systemBars = await ((_v = (_u = this._spec).getSystemBars) === null || _v === void 0 ? void 0 : _v.call(_u, this.target).catch(() => null));
                const { statusBar, navigationBar } = systemBars !== null && systemBars !== void 0 ? systemBars : {};
                if (statusBar === null || statusBar === void 0 ? void 0 : statusBar.visible) {
                    this._logger.log('Driver status bar', statusBar);
                    const statusBarSize = statusBar.height;
                    // when status bar is overlapping content on android it returns status bar height equal to display height
                    if (statusBarSize < this._driverInfo.displaySize.height) {
                        this._driverInfo.statusBarSize = Math.max((_w = this._driverInfo.statusBarSize) !== null && _w !== void 0 ? _w : 0, statusBarSize);
                    }
                }
                if (navigationBar === null || navigationBar === void 0 ? void 0 : navigationBar.visible) {
                    this._logger.log('Driver navigation size', navigationBar);
                    // if navigation bar is placed on the right side is screen the the orientation is landscape-secondary
                    if (navigationBar.x > 0)
                        this._driverInfo.orientation = 'landscape-secondary';
                    // navigation bar size could be its height or width depending on screen orientation
                    const navigationBarSize = navigationBar[((_x = this.orientation) === null || _x === void 0 ? void 0 : _x.startsWith('landscape')) ? 'width' : 'height'];
                    // when navigation bar is invisible on android it returns navigation bar size equal to display size
                    if (navigationBarSize <
                        this._driverInfo.displaySize[((_y = this.orientation) === null || _y === void 0 ? void 0 : _y.startsWith('landscape')) ? 'width' : 'height']) {
                        this._driverInfo.navigationBarSize = Math.max((_z = this._driverInfo.navigationBarSize) !== null && _z !== void 0 ? _z : 0, navigationBarSize);
                    }
                    else {
                        this._driverInfo.navigationBarSize = 0;
                    }
                }
                // bar sizes have to be scaled on android
                (_11 = this._driverInfo).statusBarSize && (_11.statusBarSize = this._driverInfo.statusBarSize / this.pixelRatio);
                (_12 = this._driverInfo).navigationBarSize && (_12.navigationBarSize = this._driverInfo.navigationBarSize / this.pixelRatio);
                windowSize = utils.geometry.scale(windowSize, 1 / this.pixelRatio);
                (_13 = this._driverInfo).displaySize && (_13.displaySize = utils.geometry.scale(this._driverInfo.displaySize, 1 / this.pixelRatio));
            }
            if (this.isIOS) {
                if ((_0 = this.orientation) === null || _0 === void 0 ? void 0 : _0.startsWith('landscape'))
                    this._driverInfo.statusBarSize = 0;
            }
            // calculate viewport location
            (_1 = (_14 = this._driverInfo).viewportLocation) !== null && _1 !== void 0 ? _1 : (_14.viewportLocation = {
                x: this.orientation === 'landscape' ? this.navigationBarSize : 0,
                y: this.statusBarSize,
            });
            // calculate viewport size
            if (!this._driverInfo.viewportSize) {
                this._driverInfo.viewportSize = { ...this._driverInfo.displaySize };
                this._driverInfo.viewportSize.height -= this.statusBarSize;
                if (this.isAndroid) {
                    this._driverInfo.viewportSize[((_2 = this.orientation) === null || _2 === void 0 ? void 0 : _2.startsWith('landscape')) ? 'width' : 'height'] -=
                        this.navigationBarSize;
                }
            }
            // calculate safe area
            if (this.isIOS && !this._driverInfo.safeArea) {
                this._driverInfo.safeArea = { x: 0, y: 0, ...this._driverInfo.displaySize };
                const topElement = await this.element({ type: '-ios class chain', selector: '**/XCUIElementTypeNavigationBar' });
                if (topElement) {
                    const topRegion = await this._spec.getElementRegion(this.target, topElement.target);
                    const topOffset = topRegion.y + topRegion.height;
                    this._driverInfo.safeArea.y = topOffset;
                    this._driverInfo.safeArea.height -= topOffset;
                }
                const bottomElement = await this.element({ type: '-ios class chain', selector: '**/XCUIElementTypeTabBar' });
                if (bottomElement) {
                    const bottomRegion = await this._spec.getElementRegion(this.target, bottomElement.target);
                    const bottomOffset = bottomRegion.height;
                    this._driverInfo.safeArea.height -= bottomOffset;
                }
            }
            // init helper lib
            this._helper = this.isIOS
                ? await helper_ios_1.HelperIOS.make({ spec: this._spec, driver: this, logger: this._logger })
                : await helper_android_1.HelperAndroid.make({ spec: this._spec, driver: this, logger: this._logger });
        }
        this._logger.log('Combined driver info', this._driverInfo);
        return this;
    }
    async refreshContexts() {
        if (this.isNative)
            return this.currentContext;
        const spec = this._spec;
        let currentContext = this.currentContext.target;
        let contextInfo = await getContextInfo(currentContext);
        const path = [];
        if (spec.parentContext) {
            while (!contextInfo.isRoot) {
                currentContext = await spec.parentContext(currentContext);
                const contextReference = await findContextReference(currentContext, contextInfo);
                if (!contextReference)
                    throw new Error('Unable to find out the chain of frames');
                path.unshift(contextReference);
                contextInfo = await getContextInfo(currentContext);
            }
        }
        else {
            currentContext = await spec.mainContext(currentContext);
            path.push(...(await findContextPath(currentContext, contextInfo)));
        }
        this._currentContext = this._mainContext;
        return this.switchToChildContext(...path);
        function transformSelector(selector) {
            return specUtils.transformSelector(spec, selector, { isWeb: true });
        }
        async function getContextInfo(context) {
            const [documentElement, selector, isRoot, isCORS] = await spec.executeScript(context, snippets.getContextInfo);
            return { documentElement, selector, isRoot, isCORS };
        }
        async function getChildContextsInfo(context) {
            const framesInfo = await spec.executeScript(context, snippets.getChildFramesInfo);
            return framesInfo.map(([contextElement, isCORS]) => ({ contextElement, isCORS }));
        }
        async function isEqualElements(context, element1, element2) {
            return spec.executeScript(context, snippets.isEqualElements, [element1, element2]).catch(() => false);
        }
        async function findContextReference(context, contextInfo) {
            if (contextInfo.selector) {
                const contextElement = await spec.findElement(context, transformSelector({ type: 'xpath', selector: contextInfo.selector }));
                if (contextElement)
                    return contextElement;
            }
            for (const childContextInfo of await getChildContextsInfo(context)) {
                if (childContextInfo.isCORS !== contextInfo.isCORS)
                    continue;
                const childContext = await spec.childContext(context, childContextInfo.contextElement);
                const contentDocument = await spec.findElement(childContext, transformSelector('html'));
                const isWantedContext = await isEqualElements(childContext, contentDocument, contextInfo.documentElement);
                await spec.parentContext(childContext);
                if (isWantedContext)
                    return childContextInfo.contextElement;
            }
        }
        async function findContextPath(context, contextInfo, contextPath = []) {
            const contentDocument = await spec.findElement(context, transformSelector('html'));
            if (await isEqualElements(context, contentDocument, contextInfo.documentElement)) {
                return contextPath;
            }
            for (const childContextInfo of await getChildContextsInfo(context)) {
                const childContext = await spec.childContext(context, childContextInfo.contextElement);
                const possibleContextPath = [...contextPath, childContextInfo.contextElement];
                const wantedContextPath = await findContextPath(childContext, contextInfo, possibleContextPath);
                await spec.mainContext(context);
                if (wantedContextPath)
                    return wantedContextPath;
                for (const contextElement of contextPath) {
                    await spec.childContext(context, contextElement);
                }
            }
        }
    }
    async switchTo(context) {
        if (await this.currentContext.equals(context)) {
            this._currentContext = context;
            return;
        }
        const currentPath = this.currentContext.path;
        const requiredPath = context.path;
        let diffIndex = -1;
        for (const [index, context] of requiredPath.entries()) {
            if (currentPath[index] && !(await currentPath[index].equals(context))) {
                diffIndex = index;
                break;
            }
        }
        if (diffIndex === 0) {
            throw new Error('Cannot switch to the context, because it has different main context');
        }
        else if (diffIndex === -1) {
            if (currentPath.length === requiredPath.length) {
                // required and current paths are the same
                return this.currentContext;
            }
            else if (requiredPath.length > currentPath.length) {
                // current path is a sub-path of required path
                return this.switchToChildContext(...requiredPath.slice(currentPath.length));
            }
            else if (currentPath.length - requiredPath.length <= requiredPath.length) {
                // required path is a sub-path of current path
                return this.switchToParentContext(currentPath.length - requiredPath.length);
            }
            else {
                // required path is a sub-path of current path
                await this.switchToMainContext();
                return this.switchToChildContext(...requiredPath);
            }
        }
        else if (currentPath.length - diffIndex <= diffIndex) {
            // required path is different from current or they are partially intersected
            // chose an optimal way to traverse from current context to target context
            await this.switchToParentContext(currentPath.length - diffIndex);
            return this.switchToChildContext(...requiredPath.slice(diffIndex));
        }
        else {
            await this.switchToMainContext();
            return this.switchToChildContext(...requiredPath);
        }
    }
    async switchToMainContext() {
        if (this.isNative)
            throw new Error('Contexts are supported only for web drivers');
        this._logger.log('Switching to the main context');
        await this._spec.mainContext(this.currentContext.target);
        return (this._currentContext = this._mainContext);
    }
    async switchToParentContext(elevation = 1) {
        if (this.isNative)
            throw new Error('Contexts are supported only for web drivers');
        this._logger.log('Switching to a parent context with elevation:', elevation);
        if (this.currentContext.path.length <= elevation) {
            return this.switchToMainContext();
        }
        try {
            while (elevation > 0) {
                await this._spec.parentContext(this.currentContext.target);
                this._currentContext = this._currentContext.parent;
                elevation -= 1;
            }
        }
        catch (err) {
            this._logger.warn('Unable to switch to a parent context due to error', err);
            this._logger.log('Applying workaround to switch to the parent frame');
            const path = this.currentContext.path.slice(1, -elevation);
            await this.switchToMainContext();
            await this.switchToChildContext(...path);
            elevation = 0;
        }
        return this.currentContext;
    }
    async switchToChildContext(...references) {
        if (this.isNative)
            throw new Error('Contexts are supported only for web drivers');
        this._logger.log('Switching to a child context with depth:', references.length);
        for (const reference of references) {
            if (reference === this.mainContext)
                continue;
            const context = await this.currentContext.context(reference);
            await context.focus();
        }
        return this.currentContext;
    }
    async normalizeRegion(region) {
        if (this.isWeb)
            return region;
        let normalizedRegion = region;
        if (this.isAndroid) {
            normalizedRegion = utils.geometry.scale(normalizedRegion, 1 / this.pixelRatio);
        }
        if (this.isIOS && utils.geometry.isIntersected(normalizedRegion, this._driverInfo.safeArea)) {
            normalizedRegion = utils.geometry.intersect(normalizedRegion, this._driverInfo.safeArea);
        }
        normalizedRegion = utils.geometry.offsetNegative(normalizedRegion, this._driverInfo.viewportLocation);
        if (normalizedRegion.y < 0) {
            normalizedRegion.height += normalizedRegion.y;
            normalizedRegion.y = 0;
        }
        return normalizedRegion;
    }
    async getRegionInViewport(context, region) {
        await context.focus();
        return context.getRegionInViewport(region);
    }
    async element(selector) {
        return this.currentContext.element(selector);
    }
    async elements(selector) {
        return this.currentContext.elements(selector);
    }
    async execute(script, arg) {
        return this.currentContext.execute(script, arg);
    }
    async takeScreenshot() {
        const image = await this._spec.takeScreenshot(this.target);
        if (utils.types.isString(image)) {
            return Buffer.from(image.replace(/[\r\n]+/g, ''), 'base64');
        }
        return image;
    }
    async getViewportRegion() {
        var _a, _b;
        return {
            ...((_b = (_a = this._driverInfo) === null || _a === void 0 ? void 0 : _a.viewportLocation) !== null && _b !== void 0 ? _b : { x: 0, y: 0 }),
            ...(await this.getViewportSize()),
        };
    }
    async getViewportSize() {
        var _a;
        let size;
        if (this.isNative) {
            if ((_a = this._driverInfo) === null || _a === void 0 ? void 0 : _a.viewportSize) {
                this._logger.log('Extracting viewport size from native driver using cached value');
                size = this._driverInfo.viewportSize;
            }
            else {
                this._logger.log('Extracting viewport size from native driver');
                size = await this.getDisplaySize();
                size.height -= this.statusBarSize;
            }
            this._logger.log(`Rounding viewport size using`, this._customConfig.useCeilForViewportSize ? 'ceil' : 'round');
            if (this._customConfig.useCeilForViewportSize) {
                size = utils.geometry.ceil(size);
            }
            else {
                size = utils.geometry.round(size);
            }
        }
        else if (this._spec.getViewportSize) {
            this._logger.log('Extracting viewport size from web driver using spec method');
            size = await this._spec.getViewportSize(this.target);
        }
        else {
            this._logger.log('Extracting viewport size from web driver using js snippet');
            size = await this.mainContext.execute(snippets.getViewportSize);
        }
        this._logger.log('Extracted viewport size', size);
        return size;
    }
    async setViewportSize(size) {
        if (this.isMobile)
            return;
        if (this._spec.setViewportSize) {
            this._logger.log('Setting viewport size to', size, 'using spec method');
            await this._spec.setViewportSize(this.target, size);
            return;
        }
        this._logger.log('Setting viewport size to', size, 'using workaround');
        const requiredViewportSize = size;
        let currentViewportSize = await this.getViewportSize();
        if (utils.geometry.equals(currentViewportSize, requiredViewportSize))
            return;
        let currentWindowSize = await this._spec.getWindowSize(this.target);
        this._logger.log('Extracted window size', currentWindowSize);
        let attempt = 0;
        while (attempt++ < 3) {
            const requiredWindowSize = {
                width: currentWindowSize.width + (requiredViewportSize.width - currentViewportSize.width),
                height: currentWindowSize.height + (requiredViewportSize.height - currentViewportSize.height),
            };
            this._logger.log(`Attempt #${attempt} to set viewport size by setting window size to`, requiredWindowSize);
            await this._spec.setWindowSize(this.target, requiredWindowSize);
            const prevViewportSize = currentViewportSize;
            currentViewportSize = await this.getViewportSize();
            if (utils.geometry.equals(currentViewportSize, prevViewportSize)) {
                currentViewportSize = await this.getViewportSize();
            }
            currentWindowSize = requiredWindowSize;
            if (utils.geometry.equals(currentViewportSize, requiredViewportSize))
                return;
            this._logger.log(`Attempt #${attempt} to set viewport size failed. Current viewport:`, currentViewportSize);
        }
        throw new Error('Failed to set viewport size!');
    }
    async getDisplaySize() {
        var _a, _b;
        if (this.isWeb && !this.isMobile)
            return;
        if ((_a = this._driverInfo) === null || _a === void 0 ? void 0 : _a.displaySize) {
            this._logger.log('Extracting display size from native driver using cached value');
            return this._driverInfo.displaySize;
        }
        let size = await this._spec.getWindowSize(this.target);
        if (((_b = (await this.getOrientation())) === null || _b === void 0 ? void 0 : _b.startsWith('landscape')) && size.height > size.width) {
            size = { width: size.height, height: size.width };
        }
        const normalizedSize = this.isAndroid ? utils.geometry.scale(size, 1 / this.pixelRatio) : size;
        this._logger.log('Extracted and normalized display size:', normalizedSize);
        return normalizedSize;
    }
    async getOrientation() {
        if (this.isWeb && !this.isMobile)
            return;
        let orientation;
        if (this.isAndroid) {
            this._logger.log('Extracting device orientation using adb command on android');
            const rotation = await this.execute('mobile:shell', {
                command: "dumpsys window | grep 'mCurrentRotation' | cut -d = -f2",
            })
                .then(r => { var _a; return (_a = r === null || r === void 0 ? void 0 : r.trim) === null || _a === void 0 ? void 0 : _a.call(r); })
                .catch(() => null);
            if (rotation === 'ROTATION_0' || rotation === '0')
                orientation = 'portrait';
            else if (rotation === 'ROTATION_90' || rotation === '3')
                orientation = 'landscape-secondary';
            else if (rotation === 'ROTATION_180' || rotation === '2')
                orientation = 'portrait-secondary';
            else if (rotation === 'ROTATION_270' || rotation === '1')
                orientation = 'landscape';
        }
        if (!orientation) {
            this._logger.log('Extracting device orientation');
            orientation = await this._spec.getOrientation(this.target);
        }
        this._logger.log('Extracted device orientation:', orientation);
        return orientation;
    }
    async setOrientation(orientation) {
        if (this.isWeb && !this.isMobile)
            return;
        this._logger.log('Set device orientation:', orientation);
        await this._spec.setOrientation(this.target, orientation);
    }
    async getCookies() {
        var _a, _b, _c;
        if (this.isNative || !this.features.allCookies)
            return [];
        try {
            return (_c = (await ((_b = (_a = this._spec).getCookies) === null || _b === void 0 ? void 0 : _b.call(_a, this.target)))) !== null && _c !== void 0 ? _c : [];
        }
        catch (error) {
            this._driverInfo.features.allCookies = false;
            throw error;
        }
    }
    async getTitle() {
        if (this.isNative)
            return null;
        const title = await this._spec.getTitle(this.target);
        this._logger.log('Extracted title:', title);
        return title;
    }
    async getUrl() {
        if (this.isNative)
            return null;
        const url = await this._spec.getUrl(this.target);
        this._logger.log('Extracted url:', url);
        return url;
    }
    async visit(url) {
        await this._spec.visit(this.target, url);
    }
}
exports.Driver = Driver;
