"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseCapabilities = void 0;
function parseCapabilities(capabilities, customConfig) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    if (capabilities.capabilities)
        capabilities = capabilities.capabilities;
    if (!(customConfig === null || customConfig === void 0 ? void 0 : customConfig.keepPlatformNameAsIs)) {
        // We use `startsWith` for just a theorerical reason. It's not based on any concrete case that we knew of at the time of writing this code.
        if ((_a = capabilities.platformName) === null || _a === void 0 ? void 0 : _a.startsWith('android')) {
            capabilities.platformName = capabilities.platformName.charAt(0).toUpperCase() + capabilities.platformName.slice(1);
        }
        // We use `startsWith` for just a theorerical reason. It's not based on any concrete case that we knew of at the time of writing this code.
        if ((_b = capabilities.platformName) === null || _b === void 0 ? void 0 : _b.startsWith('ios')) {
            capabilities.platformName = 'iOS' + capabilities.platformName.slice(3);
        }
    }
    const info = {
        browserName: !capabilities.app && !capabilities.bundleId
            ? ((_c = capabilities.browserName) !== null && _c !== void 0 ? _c : (_d = capabilities.desired) === null || _d === void 0 ? void 0 : _d.browserName) || undefined
            : undefined,
        browserVersion: ((_e = capabilities.browserVersion) !== null && _e !== void 0 ? _e : capabilities.version) || undefined,
        platformName: ((_g = (_f = capabilities.platformName) !== null && _f !== void 0 ? _f : capabilities.platform) !== null && _g !== void 0 ? _g : (_h = capabilities.desired) === null || _h === void 0 ? void 0 : _h.platformName) || undefined,
        platformVersion: capabilities.platformVersion || undefined,
        isW3C: isW3C(capabilities),
        isMobile: isMobile(capabilities),
    };
    if (info.isMobile) {
        info.deviceName = ((_k = (_j = capabilities.desired) === null || _j === void 0 ? void 0 : _j.deviceName) !== null && _k !== void 0 ? _k : capabilities.deviceName) || undefined;
        info.isNative = info.isMobile && !info.browserName;
        info.isIOS = isIOS(capabilities);
        info.isAndroid = isAndroid(capabilities);
        info.orientation = (_m = ((_l = capabilities.deviceOrientation) !== null && _l !== void 0 ? _l : capabilities.orientation)) === null || _m === void 0 ? void 0 : _m.toLowerCase();
    }
    if (info.isNative) {
        info.displaySize = extractDisplaySize(capabilities);
        info.pixelRatio = capabilities.pixelRatio;
        info.statusBarSize = (_o = capabilities.statBarHeight) !== null && _o !== void 0 ? _o : (_p = capabilities.viewportRect) === null || _p === void 0 ? void 0 : _p.top;
        if (info.displaySize && info.orientation && capabilities.viewportRect) {
            info.navigationBarSize =
                info.orientation === 'landscape'
                    ? info.displaySize.width - (capabilities.viewportRect.left + capabilities.viewportRect.width)
                    : info.displaySize.height - (capabilities.viewportRect.top + capabilities.viewportRect.height);
        }
    }
    return info;
}
exports.parseCapabilities = parseCapabilities;
function isW3C(capabilities) {
    const isW3C = Boolean((capabilities.platformName || capabilities.browserVersion) &&
        (capabilities.platformVersion || capabilities.hasOwnProperty('setWindowRect')));
    return isW3C || isAppium(capabilities);
}
function isAppium(capabilities) {
    return (Boolean(capabilities.automationName || capabilities.deviceName || capabilities.appiumVersion) ||
        Object.keys(capabilities).some(cap => cap.startsWith('appium:')));
}
function _isChrome(capabilities) {
    return Boolean(capabilities.chrome || capabilities['goog:chromeOptions']);
}
function _isFirefox(capabilities) {
    return capabilities.browserName === 'firefox' || Object.keys(capabilities).some(cap => cap.startsWith('moz:'));
}
function isMobile(capabilities) {
    var _a, _b;
    return (capabilities.browserName === '' ||
        ['ipad', 'iphone', 'android'].includes((_b = (_a = capabilities.browserName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== null && _b !== void 0 ? _b : '') ||
        isAppium(capabilities));
}
function isIOS(capabilities) {
    return /iOS/i.test(capabilities.platformName) || /(iPad|iPhone)/i.test(capabilities.deviceName);
}
function isAndroid(capabilities) {
    return /Android/i.test(capabilities.platformName) || /Android/i.test(capabilities.browserName);
}
function extractDisplaySize(capabilities) {
    if (!capabilities.deviceScreenSize)
        return undefined;
    const [width, height] = capabilities.deviceScreenSize.split('x');
    if (Number.isNaN(Number(width)) || Number.isNaN(Number(height)))
        return undefined;
    return { width: Number(width), height: Number(height) };
}
