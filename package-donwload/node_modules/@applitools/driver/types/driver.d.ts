/// <reference types="node" />
import type * as types from '@applitools/types';
import { type Logger } from '@applitools/logger';
import { Context, ContextReference } from './context';
import { Element } from './element';
import { HelperIOS } from './helper-ios';
import { HelperAndroid } from './helper-android';
export declare class Driver<TDriver, TContext, TElement, TSelector> {
    private _target;
    private _mainContext;
    private _currentContext;
    private _driverInfo;
    private _logger;
    private _customConfig;
    private _helper?;
    protected readonly _spec: types.SpecDriver<TDriver, TContext, TElement, TSelector>;
    constructor(options: {
        spec: types.SpecDriver<TDriver, TContext, TElement, TSelector>;
        driver: Driver<TDriver, TContext, TElement, TSelector> | TDriver;
        logger?: Logger;
        customConfig?: types.CustomDriverConfig;
    });
    get target(): TDriver;
    get currentContext(): Context<TDriver, TContext, TElement, TSelector>;
    get mainContext(): Context<TDriver, TContext, TElement, TSelector>;
    get helper(): HelperAndroid<TDriver, TContext, TElement, TSelector> | HelperIOS<TDriver, TContext, TElement, TSelector>;
    get features(): {
        shadowSelector?: boolean;
        allCookies?: boolean;
    };
    get deviceName(): string;
    get platformName(): string;
    get platformVersion(): string | number;
    get browserName(): string;
    get browserVersion(): string | number;
    get userAgent(): string;
    get orientation(): 'portrait' | 'landscape' | 'portrait-secondary' | 'landscape-secondary';
    get pixelRatio(): number;
    get viewportScale(): number;
    get statusBarSize(): number;
    get navigationBarSize(): number;
    get isNative(): boolean;
    get isWeb(): boolean;
    get isMobile(): boolean;
    get isIOS(): boolean;
    get isAndroid(): boolean;
    get isIE(): boolean;
    get isEdgeLegacy(): boolean;
    updateCurrentContext(context: Context<TDriver, TContext, TElement, TSelector>): void;
    init(): Promise<this>;
    refreshContexts(): Promise<Context<TDriver, TContext, TElement, TSelector>>;
    switchTo(context: Context<TDriver, TContext, TElement, TSelector>): Promise<Context<TDriver, TContext, TElement, TSelector>>;
    switchToMainContext(): Promise<Context<TDriver, TContext, TElement, TSelector>>;
    switchToParentContext(elevation?: number): Promise<Context<TDriver, TContext, TElement, TSelector>>;
    switchToChildContext(...references: ContextReference<TDriver, TContext, TElement, TSelector>[]): Promise<Context<TDriver, TContext, TElement, TSelector>>;
    normalizeRegion(region: types.Region): Promise<types.Region>;
    getRegionInViewport(context: Context<TDriver, TContext, TElement, TSelector>, region: types.Region): Promise<types.Region>;
    element(selector: types.Selector<TSelector>): Promise<Element<TDriver, TContext, TElement, TSelector>>;
    elements(selector: types.Selector<TSelector>): Promise<Element<TDriver, TContext, TElement, TSelector>[]>;
    execute(script: ((arg: any) => any) | string, arg?: any): Promise<any>;
    takeScreenshot(): Promise<Buffer>;
    getViewportRegion(): Promise<types.Region>;
    getViewportSize(): Promise<types.Size>;
    setViewportSize(size: types.Size): Promise<void>;
    getDisplaySize(): Promise<types.Size>;
    getOrientation(): Promise<'portrait' | 'landscape' | 'portrait-secondary' | 'landscape-secondary'>;
    setOrientation(orientation: 'portrait' | 'landscape'): Promise<void>;
    getCookies(): Promise<types.Cookie[]>;
    getTitle(): Promise<string>;
    getUrl(): Promise<string>;
    visit(url: string): Promise<void>;
}
