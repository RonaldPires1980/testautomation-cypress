import type * as types from '@applitools/types';
declare type CommonSelector<TSelector = never> = {
    selector: TSelector | string;
    type?: string;
    shadow?: CommonSelector<TSelector> | TSelector | string;
    frame?: CommonSelector<TSelector> | TSelector | string;
};
export declare function isSimpleCommonSelector(selector: any): selector is CommonSelector;
export declare function isCommonSelector<TSelector>(spec: Pick<types.SpecDriver<unknown, unknown, unknown, TSelector>, 'isSelector'>, selector: any): selector is CommonSelector<TSelector>;
export declare function isSelector<TSelector>(spec: Pick<types.SpecDriver<unknown, unknown, unknown, TSelector>, 'isSelector'>, selector: any): selector is types.Selector<TSelector>;
export declare function transformSelector<TSelector>(spec: Pick<types.SpecDriver<unknown, unknown, unknown, TSelector>, 'isSelector' | 'transformSelector'>, selector: types.Selector<TSelector>, environment?: {
    isWeb?: boolean;
    isNative?: boolean;
    isIOS?: boolean;
    isAndroid?: boolean;
}): TSelector;
export declare function splitSelector<TSelector>(spec: Pick<types.SpecDriver<unknown, unknown, unknown, TSelector>, 'isSelector'>, selector: types.Selector<TSelector>): {
    contextSelectors: types.Selector<TSelector>[];
    elementSelector: types.Selector<TSelector>;
};
export declare function withFastCache<TSpecDriver extends types.SpecDriver<unknown, unknown, unknown, unknown>>(spec: TSpecDriver): TSpecDriver;
export {};
