"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeSocket = void 0;
const utils = __importStar(require("@applitools/utils"));
const ws_1 = __importDefault(require("ws"));
function makeSocket(ws, { logger } = {}) {
    let socket = null;
    const listeners = new Map();
    const queue = new Set();
    attach(ws);
    return {
        connect,
        disconnect,
        emit,
        on,
        once,
        off,
        request,
        command,
        create,
        ref,
        unref,
    };
    function attach(ws) {
        if (!ws)
            return;
        if (ws.readyState === ws_1.default.CONNECTING)
            ws.on('open', () => attach(ws));
        else if (ws.readyState === ws_1.default.OPEN) {
            socket = ws;
            queue.forEach(command => command());
            queue.clear();
            socket.on('message', message => {
                const { name, key, payload } = deserialize(message);
                const fns = listeners.get(name);
                if (fns)
                    fns.forEach(fn => fn(payload, key));
                if (key) {
                    const fns = listeners.get(`${name}/${key}`);
                    if (fns)
                        fns.forEach(fn => fn(payload, key));
                }
            });
            socket.on('close', () => {
                const fns = listeners.get('close');
                if (fns)
                    fns.forEach(fn => fn());
            });
            socket.on('error', error => {
                const fns = listeners.get('error');
                if (fns)
                    fns.forEach(fn => fn(error));
            });
        }
    }
    function connect(url) {
        const ws = new ws_1.default(url);
        attach(ws);
    }
    function disconnect() {
        if (!socket)
            return;
        socket.terminate();
        socket = null;
    }
    function emit(type, payload) {
        const command = () => socket.send(serialize(type, payload));
        if (socket)
            command();
        else
            queue.add(command);
        return () => queue.delete(command);
    }
    function on(type, fn) {
        const name = utils.types.isString(type) ? type : `${type.name}/${type.key}`;
        let fns = listeners.get(name);
        if (!fns) {
            fns = new Set();
            listeners.set(name, fns);
        }
        fns.add(fn);
        return () => off(name, fn);
    }
    function once(type, fn) {
        const off = on(type, (...args) => (fn(...args), off()));
        return off;
    }
    function off(type, fn) {
        const name = utils.types.isString(type) ? type : `${type.name}/${type.key}`;
        if (!fn)
            return listeners.delete(name);
        const fns = listeners.get(name);
        if (!fns)
            return false;
        const existed = fns.delete(fn);
        if (!fns.size)
            listeners.delete(name);
        return existed;
    }
    function request(name, payload) {
        return new Promise((resolve, reject) => {
            const key = utils.general.guid();
            emit({ name, key }, payload);
            once({ name, key }, response => {
                if (response.error) {
                    const error = new Error(response.error.message);
                    error.stack = response.error.stack;
                    return reject(error);
                }
                return resolve(response.result);
            });
        });
    }
    function command(name, fn) {
        return on(name, async (payload, key) => {
            logger === null || logger === void 0 ? void 0 : logger.log('[COMMAND]', name, JSON.stringify(payload, null, 4));
            try {
                const result = await fn(payload);
                emit({ name, key }, { result });
            }
            catch (error) {
                emit({ name, key }, { error: { message: error.message, stack: error.stack, reason: error.reason } });
            }
        });
    }
    function create(name, fn) {
        let temporary = makeState();
        let result = temporary;
        on(name, async (payload) => {
            result = temporary;
            try {
                result.resolve(await fn(payload));
            }
            catch (error) {
                result.reject(error);
            }
            finally {
                temporary = makeState();
            }
        });
        return {
            then: (onResolved, onRejected) => result.promise.then(onResolved, onRejected),
        };
        function makeState() {
            const state = {};
            state.promise = new Promise((resolve, reject) => {
                state.resolve = resolve;
                state.reject = reject;
            });
            return state;
        }
    }
    function ref() {
        //@ts-ignore
        const command = () => socket._socket.ref();
        if (socket)
            command();
        else
            queue.add(command);
        return () => queue.delete(command);
    }
    function unref() {
        //@ts-ignore
        const command = () => socket._socket.unref();
        if (socket)
            command();
        else
            queue.add(command);
        return () => queue.delete(command);
    }
}
exports.makeSocket = makeSocket;
function serialize(type, payload) {
    const message = utils.types.isString(type) ? { name: type, payload } : { name: type.name, key: type.key, payload };
    return JSON.stringify(message);
}
function deserialize(message) {
    return JSON.parse(message);
}
