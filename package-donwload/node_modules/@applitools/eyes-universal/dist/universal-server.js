"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeServer = void 0;
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const eyes_sdk_core_1 = require("@applitools/eyes-sdk-core");
const logger_1 = require("@applitools/logger");
const handler_1 = require("./handler");
const socket_1 = require("./socket");
const refer_1 = require("./refer");
const tracker_1 = require("./debug/tracker");
const custom_1 = require("./spec-driver/custom");
const webdriverSpec = __importStar(require("./spec-driver/webdriver"));
const universal_server_eyes_commands_1 = require("./universal-server-eyes-commands");
const IDLE_TIMEOUT = 900000; // 15min
const LOG_DIRNAME = (_a = process.env.APPLITOOLS_LOG_DIR) !== null && _a !== void 0 ? _a : path_1.default.resolve(os_1.default.tmpdir(), `applitools-logs`);
async function makeServer({ debug = false, idleTimeout = IDLE_TIMEOUT, ...handlerOptions } = {}) {
    var _a;
    const { server, port } = await (0, handler_1.makeHandler)({ ...handlerOptions, debug });
    console.log(port); // NOTE: this is a part of the generic protocol
    (_a = process.send) === null || _a === void 0 ? void 0 : _a.call(process, { name: 'port', payload: { port } }); // NOTE: this is a part of the js specific protocol
    if (!server) {
        console.log(`You are trying to spawn a duplicated server, use the server on port ${port} instead`);
        return;
    }
    const baseLogger = (0, logger_1.makeLogger)({
        handler: { type: 'rolling file', name: 'eyes', dirname: LOG_DIRNAME },
        label: 'eyes',
        level: 'info',
        colors: false,
    });
    console.log(`Logs saved in: ${LOG_DIRNAME}`);
    baseLogger.log('Server is started');
    let idle;
    if (idleTimeout) {
        idle = setTimeout(() => server.close(), idleTimeout);
    }
    let serverClosed = false;
    server.on('close', () => {
        clearTimeout(idle);
        serverClosed = true;
    });
    server.on('connection', client => {
        const refer = (0, refer_1.makeRefer)();
        const socket = (0, tracker_1.withTracker)({
            debug,
            socket: (0, socket_1.makeSocket)(client, { logger: baseLogger }),
        });
        if (idleTimeout) {
            clearTimeout(idle);
            socket.on('close', () => {
                if (server.clients.size > 0 || serverClosed)
                    return;
                idle = setTimeout(() => server.close(), idleTimeout);
            });
        }
        const logger = baseLogger.extend({
            console: {
                log: (message) => socket.emit('Server.log', { level: 'info', message }),
                warn: (message) => socket.emit('Server.log', { level: 'warn', message }),
                error: (message) => socket.emit('Server.log', { level: 'error', message }),
                fatal: (message) => socket.emit('Server.log', { level: 'fatal', message }),
            },
        });
        logger.console.log(`Logs saved in: ${LOG_DIRNAME}`);
        socket.command('Server.getInfo', async () => {
            return { logsDir: LOG_DIRNAME };
        });
        const sdkPromise = socket.create('Core.makeSDK', ({ name, version, cwd, commands, protocol }) => {
            const spec = protocol === 'webdriver' ? webdriverSpec : (0, custom_1.makeSpec)({ socket, commands });
            return (0, eyes_sdk_core_1.makeSDK)({
                name: `eyes-universal/${name}`,
                version: `${require('../package.json').version}/${version}`,
                cwd,
                spec,
                VisualGridClient: require('@applitools/visual-grid-client'),
            });
        });
        socket.command('Core.makeManager', async (config) => {
            const sdk = await sdkPromise;
            const managerRef = refer.ref(await sdk.makeManager(config));
            return managerRef;
        });
        socket.command('Core.getViewportSize', async ({ driver }) => {
            const sdk = await sdkPromise;
            return sdk.getViewportSize({ logger, driver });
        });
        socket.command('Core.setViewportSize', async ({ driver, size }) => {
            const sdk = await sdkPromise;
            return sdk.setViewportSize({ logger, driver, size });
        });
        socket.command('Core.closeBatches', async ({ settings }) => {
            const sdk = await sdkPromise;
            return sdk.closeBatches({ logger, settings });
        });
        socket.command('Core.deleteTest', async ({ settings }) => {
            const sdk = await sdkPromise;
            return sdk.deleteTest({ logger, settings });
        });
        socket.command('EyesManager.openEyes', async ({ manager, driver, config }) => {
            const eyes = await refer.deref(manager).openEyes({ logger, driver, config });
            const eyesRef = refer.ref(eyes, manager);
            return eyesRef;
        });
        socket.command('EyesManager.closeManager', async ({ manager, throwErr }) => {
            return refer.deref(manager).closeManager({ throwErr });
        });
        socket.command('Eyes.check', async ({ eyes, settings, config, driver }) => {
            return refer.deref(eyes).check({ settings, config, driver });
        });
        socket.command('Eyes.locate', async ({ eyes, settings, config }) => {
            return refer.deref(eyes).locate({ settings, config });
        });
        socket.command('Eyes.extractTextRegions', async ({ eyes, settings, config }) => {
            return refer.deref(eyes).extractTextRegions({ settings, config });
        });
        socket.command('Eyes.extractText', async ({ eyes, regions, config }) => {
            return refer.deref(eyes).extractText({ regions, config });
        });
        socket.command('Eyes.close', async ({ eyes, throwErr }) => {
            const results = await refer.deref(eyes).close({ throwErr });
            refer.destroy(eyes);
            return results;
        });
        socket.command('Eyes.abort', async ({ eyes }) => {
            return await (0, universal_server_eyes_commands_1.abort)({ eyes, refer });
        });
        socket.command('Debug.checkSpecDriver', async ({ driver, commands }) => {
            return (0, eyes_sdk_core_1.checkSpecDriver)({ spec: (0, custom_1.makeSpec)({ socket, commands }), driver });
        });
        socket.command('Debug.getHistory', async () => {
            return socket.getHistory();
        });
    });
    return { port, close: () => server.close() };
}
exports.makeServer = makeServer;
