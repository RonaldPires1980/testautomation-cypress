#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
const universal_server_process_1 = require("./universal-server-process");
const universal_server_1 = require("./universal-server");
const egCli = __importStar(require("@applitools/execution-grid-client/dist/cli"));
yargs_1.default
    .example([
    ['eyes-universal', 'Run Eyes Universal server on default port (21077)'],
    ['eyes-universal --fork', 'Run Eyes Universal server in a forked process'],
    ['eyes-universal --port 8080', 'Run Eyes Universal server on port 8080'],
    ['eyes-universal --no-singleton', 'Run Eyes Universal server on a non-singleton mode'],
    ['eyes-universal --lazy', 'Run Eyes Universal server on a lazy mode'],
])
    .command({
    command: '*',
    builder: yargs => yargs.options({
        port: {
            description: 'run server on a specific port.',
            alias: 'p',
            type: 'number',
            default: 21077,
        },
        singleton: {
            description: 'runs server on a singleton mode. It will prevent the server to start in case the same server is already started.',
            alias: 's',
            type: 'boolean',
            default: true,
        },
        lazy: {
            description: 'runs server on a lazy mode. It will not try to find a free port if the required one is already taken.',
            alias: 'l',
            type: 'boolean',
            default: false,
        },
        fork: {
            description: 'runs server in a forked process.',
            type: 'boolean',
            default: false,
        },
        debug: {
            description: 'runs server in a debug mode.',
            type: 'boolean',
            default: false,
        },
        cert: {
            description: 'path to the certificate file.',
            alias: 'cert-path',
            type: 'string',
            implies: 'key',
        },
        key: {
            description: 'path to the key file.',
            alias: 'key-path',
            type: 'string',
            implies: 'cert',
        },
        'idle-timeout': {
            description: 'time in minutes for server to stay responsible in case of idle.',
            type: 'number',
            default: 15,
            coerce: value => value * 60 * 1000,
        },
        config: {
            description: 'json string to use instead of cli arguments',
            type: 'string',
            coerce: JSON.parse,
        },
    }),
    handler: async (args) => {
        if (args.fork) {
            const { port } = await (0, universal_server_process_1.makeServerProcess)({ ...args, fork: false });
            console.log(port); // NOTE: this is a part of the generic protocol
        }
        else {
            (0, universal_server_1.makeServer)({ ...args, ...args.config });
        }
    },
})
    .command({
    command: 'eg-client',
    describe: 'Run EG Client',
    ...egCli,
})
    .wrap(yargs_1.default.terminalWidth()).argv;
